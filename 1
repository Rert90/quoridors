#include <iostream>
#include <winbgim.h>
#include <graphics.h>
#include <cmath>
#include <stdio.h>
#include <windows.h>
#include <fstream>
#include <conio.h>
#include <cstring>
#include <cstdlib>
#define L 17
#define C 17
using namespace std;

int i,j;
int x,y;
char m[L][C];
int NrZiduri1=10;
int NrZiduri2=10;
int ordine=1;
int finish=0;

void creareTabla(char m[L][C])
{    for(int i=1; i<=17; i++)
        {for(int j=1; j<=17; j++)
             {  if(i%2!=    0)
                   {
                     if(j%2) m[i][j]='0';
                        else m[i][j]='1';
                   }
            else m[i][j]='1';
             }
        }
    m[1][9]='*';
    m[17][9]='@';
}
void AltJucator()
{
    if(ordine%2)
        cout<<"E randul lui *.   Ziduri ramase: "<<NrZiduri1<<endl;
    else cout<<"E randul lui @.   Ziduri ramase: "<<NrZiduri2<<endl;
}

void GasireJucator1(char m[L][C], int &x, int &y)
      {int i, j;
         for(i=1;i<=17;i++)
         for(j=1;j<=17;j++)
            if(m[i][j]=='*')
            {
                x=i;
                y=j;
                break;
            }
      }

 void GasireJucator2(char m[L][C] ,int &x, int &y)
      {int i, j;
         for(i=1;i<=17;i++)
         for(j=1;j<=17;j++)
            if(m[i][j]=='@')
            {
                x=i;
                y=j;
                break;
            }
      }

     void copiereMatrice(char m[L][C], char copie[L][C])
     {
         for(int i=1;i<=17;i++)
         for(int j=1;j<=17;j++)
         copie[i][j]=m[i][j];
     }
     void PlasareZid(char m[L][C],int &x, int &y)
     { char orientare[10];
     cout<<"unde vrei sa plasezi zidul? "<<endl;
     cin>>x>>y;
        if(x<1 || x>17 || y<1 || y>17)
        {
            cout<<"Nu exista aceasta pozitie in matrice"<<endl;
            PlasareZid(m,x,y);
        }



     cout<<"ce zid vrei sa plasezi? (orizontal/vertical) ";
        cin>>orientare;
        if(strcmp(orientare,"orizontal")==0)
        {
            if(m[x][y]=='1' && m[x][y+1]=='1' && m[x][y-1]=='1')
            {
                m[x][y]='-';
                m[x][y+1]='-';
                m[x][y-1]='-';
            }
            else
            {
                cout<<"Nu se poate plasa aici un zid orizontal"<<endl;

                PlasareZid(m,x,y);
            }
        }
        else if(strcmp(orientare,"vertical")==0)
        {
            if(m[x][y]=='1' && m[x+1][y]=='1' && m[x-1][y]=='1')
            {
                m[x][y]='|';
                m[x+1][y]='|';
                m[x-1][y]='|';
            }
            else
            {
                cout<<"Nu se poate plasa aici un zid vertical"<<endl;
                PlasareZid(m,x,y);

            }
     }

     }
     void afisareMatrice(char m[L][C])
     {  system("cls");
         for(int i=1;i<=17;i++)
         {
             for(int j=1;j<=17;j++)
             cout<<m[i][j]<<" ";
             cout<<endl;
         }
     }
     void mutareJucator1(char m[L][C], int &x, int &y)
     {  GasireJucator1(m,x,y);
        char directie[10];
         cout<<"In ce directie vrei sa te misti? (sus/jos/stanga/dreapta) ";
         cin>>directie;

         if(strcmp(directie,"sus")==0)
         {
             if(m[x-2][y]=='0'&&m[x-1][y]=='1')
            {
                m[x][y]='0';
                m[x-2][y]='*';
            }
            else if(m[x-1][y]=='-')
            {
                cout<<"Nu se poate merge in aceasta directie"<<endl;
                mutareJucator1(m,x,y);
            }
            else if(m[x-1][y]=='|')
            {
               cout<<"Nu se poate merge in aceasta directie"<<endl;
                mutareJucator1(m,x,y);
            }
            else if(m[x-2][y]=='@'&&(m[x-3][y]=='-'||m[x-3][y]=='|'))
            {
                cout<<"Nu se poate merge in aceasta directie"<<endl;
                mutareJucator1(m,x,y);
            }
            else if(m[x-2][y]=='@'&&m[x-3][y]=='1')
            {
                m[x][y]='0';
                m[x-4][y]='*';
            }

            }
            else if(strcmp(directie,"jos")==0)
            {
                if(m[x+2][y]=='0'&&m[x+1][y]=='1')
            {
                m[x][y]='0';
                m[x+2][y]='*';
            }
            else if(m[x+1][y]=='|')
            {
                cout<<"Nu se poate merge in aceasta directie"<<endl;
                mutareJucator1(m,x,y);
            }
            else if(m[x+1][y]=='-')
            {
                cout<<"Nu se poate merge in aceasta directie"<<endl;
                mutareJucator1(m,x,y);
            }
            else if(m[x+2][y]=='@'&&(m[x+3][y]=='-'||m[x+3][y]=='|'))
            {
                cout<<"nu se poate merge in aceasta directie"<<endl;
                mutareJucator1(m,x,y);

            }
            else if(m[x+2][y]=='@'&&m[x+3][y]=='1')
            {
                m[x][y]='0';
                m[x+4][y]='*';
            }
            }
            else if(strcmp(directie,"dreapta")==0)
            {
                if(m[x][y+2]=='0'&&m[x][y+1]=='1')
            {
                m[x][y]='0';
                m[x][y+2]='*';
            }
            else if(m[x][y+1]=='-')
            {
                cout<<"Nu se poate merge in aceasta directie"<<endl;
                mutareJucator1(m,x,y);
            }
            else if(m[x][y+1]=='|')
            {
                cout<<"Nu se poate merge in aceasta directie"<<endl;
                mutareJucator1(m,x,y);
            }
            else if(m[x][y+2]=='@'&&(m[x][y+3]=='-'||m[x][y+3]=='|'))
            {
                cout<<"Nu se poate merge in aceasta directie"<<endl;
                mutareJucator1(m,x,y);
            }
            else if(m[x][y+2]=='@'&&m[x][y+3]=='1')
            {
                m[x][y]='0';
                m[x][y+4]='*';
            }
            }
            else if(strcmp(directie,"stanga")==0)
            {
                if(m[x][y-2]=='0'&&m[x][y-1]=='1')
            {
                m[x][y]='0';
                m[x][y-2]='*';
            }
            else if(m[x][y-1]=='-')
            {
                cout<<"Nu se poate merge in aceasta directie"<<endl;
                mutareJucator1(m,x,y);
            }
            else if(m[x][y-1]=='|')
            {

                    cout<<"Nu se poate merge in aceasta directie"<<endl;
                    mutareJucator1(m,x,y);

            }
            else if(m[x][y-2]=='@'&&(m[x][y-3]=='-'||m[x][y-3]=='|'))
            {
                cout<<"Nu se poate merge in aceasta directie"<<endl;
                mutareJucator1(m,x,y);
            }
            else if(m[x][y-2]=='@'&&m[x][y-3]=='1')
            {
                m[x][y]='0';
                m[x][y-4]='*';
            }
            }


        }

        void mutareJucator2(char m[L][C], int &x, int &y)
     {  GasireJucator2(m,x,y);
        char directie[10];
         cout<<"In ce directie vrei sa te misti? (sus/jos/stanga/dreapta) ";
         cin>>directie;

         if(strcmp(directie,"sus")==0)
         {
             if(m[x-2][y]=='0'&&m[x-1][y]=='1')
            {
                m[x][y]='0';
                m[x-2][y]='@';
            }
            else if(m[x-1][y]=='-')
            {
                cout<<"Nu se poate merge in aceasta directie"<<endl;
                mutareJucator2(m,x,y);
            }
            else if(m[x-1][y]=='|')
            {
               cout<<"Nu se poate merge in aceasta directie"<<endl;
                mutareJucator2(m,x,y);
            }
            else if(m[x-2][y]=='*'&&(m[x-3][y]=='-'||m[x-3][y]=='|'))
            {
                cout<<"Nu se poate merge in aceasta directie"<<endl;
                mutareJucator2(m,x,y);
            }
            else if(m[x-2][y]=='*'&&m[x-3][y]=='1')
                {
                    m[x][y]='0';
                    m[x-4][y]='@';
                }


            }
            else if(strcmp(directie,"jos")==0)
            {
                if(m[x+2][y]=='0'&&m[x+1][y]=='1')
            {
                m[x][y]='0';
                m[x+2][y]='@';
            }
            else if(m[x+1][y]=='|')
            {
                cout<<"Nu se poate merge in aceasta directie"<<endl;
                mutareJucator2(m,x,y);
            }
            else if(m[x+1][y]=='-')
            {
                cout<<"Nu se poate merge in aceasta directie"<<endl;
                mutareJucator2(m,x,y);
            }
            else if(m[x+2][y]=='*'&&(m[x+3][y]=='-'||m[x+3][y]=='|'))
            {
                cout<<"Nu se poate merge in aceasta directie"<<endl;
                mutareJucator2(m,x,y);
            }
            else if(m[x+2][y]=='*'&&m[x+3][y]=='1')
            {
                m[x][y]='0';
                m[x+4][y]='@';
            }
            }
            else if(strcmp(directie,"stanga")==0)
            {
                if(m[x][y-2]=='0'&&m[x][y-1]=='1')
            {
                m[x][y]='0';
                m[x][y-2]='@';
            }
            else if(m[x][y-1]=='-')
            {
                cout<<"Nu se poate merge in aceasta directie"<<endl;
                mutareJucator2(m,x,y);
            }
            else if(m[x][y-1]=='|')
            {

                    cout<<"Nu se poate merge in aceasta directie"<<endl;
                    mutareJucator2(m,x,y);

            }
            else if(m[x][y-2]=='*'&&(m[x][y-3]=='-'||m[x][y-3]=='|'))
            {
                cout<<"Nu se poate merge in aceasta directie"<<endl;
                mutareJucator2(m,x,y);
            }
            else if(m[x][y-2]=='*'&&m[x][y-3]=='1')
            {
                m[x][y]='0';
                m[x][y-4]='@';

            }
            else if(strcmp(directie,"dreapta")==0)
            {
                if(m[x][y+2]=='0'&&m[x][y+1]=='1')
            {
                m[x][y]='0';
                m[x][y+2]='@';
            }

            else if(m[x][y+1]=='|')
            {

                    cout<<"Nu se poate merge in aceasta directie"<<endl;
                    mutareJucator2(m,x,y);

            }
            else if(m[x][y+1]=='-')
            {

                    cout<<"Nu se poate merge in aceasta directie"<<endl;
                    mutareJucator2(m,x,y);

            }
            else if(m[x][y+2]=='*'&&m[x][y+3]=='1')
            {
                m[x][y]='0';
                m[x][y+4]='@';

            }
            else if(m[x][y+2]=='*'&&(m[x][y+3]=='-'||m[x][y+3]=='|'))
            {
                cout<<"Nu se poate merge in aceasta directie"<<endl;
                mutareJucator2(m,x,y);
            }


        }
     }
     }
int VerificareContinut(char m[L][C],int x,int y)
{   return m[x][y];
}
void SelectiePatrat(char m[L][C],int x,int y)
{
    char continut;
    continut=VerificareContinut(m,x,y);
    if(ordine%2==1)
    {   cout<<"apasa p daca vrei sa pui zid sau m daca vrei sa misti pionul"<<endl;
        char alegere;
        cin>>alegere;
        if(alegere=='p')
        {PlasareZid(m,x,y);
            NrZiduri1--;
            ordine++;
        }
        else if(alegere=='m')
        {
            mutareJucator1(m,x,y);
            ordine++;
        }
        else
        {
            cout<<"alegere gresita"<<endl;
            SelectiePatrat(m,x,y);
        }
    }
    else if(ordine%2==0)
    {   cout<<"apasa p daca vrei sa pui zid sau m daca vrei sa misti pionul"<<endl;
        char alegere;
        cin>>alegere;
        if(alegere=='p')
        {PlasareZid(m,x,y);
            NrZiduri2--;
            ordine++;
        }
        else if(alegere=='m')
        {
            mutareJucator2(m,x,y);
            ordine++;
        }
        else
        {
            cout<<"alegere gresita"<<endl;
            SelectiePatrat(m,x,y);
        }

    }

}
bool finalJoc(char m[L][C])

{
    int j;

    if(ordine==50)
    {
        cout<<"Jocul s-a terminat in egalitate"<<endl;
        return true;
    }
    for(j=1;j<=C;j++)
    {
        if(m[1][j]=='@')
        {
            cout<<"Jucatorul 2 a castigat"<<endl;
            return true;
        }
        else if(m[L][j]=='*')
        {
            cout<<"Jucatorul 1 a castigat"<<endl;
            return true;
        }
    }
    return false;
}
     int main()
     {
         creareTabla(m);
         afisareMatrice(m);
         while(!finalJoc(m))
         {AltJucator();
         GasireJucator1(m,x,y);
         SelectiePatrat(m,x,y);
         afisareMatrice(m);
         AltJucator();
         GasireJucator2(m,x,y);
         SelectiePatrat(m,x,y);
        afisareMatrice(m);
         }
     }
